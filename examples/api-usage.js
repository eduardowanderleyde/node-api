const axios = require('axios');

// Base configuration
const API_BASE_URL = 'http://localhost:3000';
let authToken = null;

// Configured Axios client
const apiClient = axios.create({
  baseURL: API_BASE_URL,
  timeout: 10000,
  headers: {
    'Content-Type': 'application/json'
  }
});

// Function to perform login
async function login(email, password) {
  try {
    console.log('üîê Performing login...');
    const response = await apiClient.post('/auth/login', {
      email,
      password
    });
    
    authToken = response.data.token;
    console.log('‚úÖ Login successful!');
    console.log(`üë§ User: ${response.data.user.name} (${response.data.user.role})`);
    
    return authToken;
  } catch (error) {
    console.error('‚ùå Login error:', error.response?.data || error.message);
    throw error;
  }
}

// Fun√ß√£o para registrar usu√°rio
async function registerUser(userData) {
  try {
    console.log('üìù Registrando novo usu√°rio...');
    const response = await apiClient.post('/auth/register', userData);
    
    console.log('‚úÖ Usu√°rio registrado com sucesso!');
    console.log(`üë§ Usu√°rio: ${response.data.user.name} (${response.data.user.role})`);
    
    return response.data;
  } catch (error) {
    console.error('‚ùå Erro no registro:', error.response?.data || error.message);
    throw error;
  }
}

// Fun√ß√£o para verificar token
async function verifyToken() {
  if (!authToken) {
    console.log('‚ö†Ô∏è  Nenhum token dispon√≠vel');
    return false;
  }

  try {
    console.log('üîç Verificando token...');
    const response = await apiClient.get('/auth/verify', {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    
    console.log('‚úÖ Token v√°lido!');
    return true;
  } catch (error) {
    console.error('‚ùå Token inv√°lido:', error.response?.data || error.message);
    return false;
  }
}

// Fun√ß√£o para obter perfil do usu√°rio
async function getProfile() {
  if (!authToken) {
    console.log('‚ö†Ô∏è  Nenhum token dispon√≠vel');
    return null;
  }

  try {
    console.log('üë§ Obtendo perfil do usu√°rio...');
    const response = await apiClient.get('/auth/profile', {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    
    console.log('‚úÖ Perfil obtido com sucesso!');
    console.log(`üë§ Nome: ${response.data.user.name}`);
    console.log(`üìß Email: ${response.data.user.email}`);
    console.log(`üîë Role: ${response.data.user.role}`);
    
    return response.data.user;
  } catch (error) {
    console.error('‚ùå Erro ao obter perfil:', error.response?.data || error.message);
    throw error;
  }
}

// Fun√ß√£o para listar produtos
async function getProducts(limit = 10, sort = 'desc') {
  if (!authToken) {
    console.log('‚ö†Ô∏è  Nenhum token dispon√≠vel');
    return null;
  }

  try {
    console.log('üõçÔ∏è  Buscando produtos...');
    const response = await apiClient.get(`/products?limit=${limit}&sort=${sort}`, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    
    console.log(`‚úÖ ${response.data.total} produtos encontrados!`);
    console.log(`üíæ Cache: ${response.data.cached ? 'Sim' : 'N√£o'}`);
    
    return response.data.data;
  } catch (error) {
    console.error('‚ùå Erro ao buscar produtos:', error.response?.data || error.message);
    throw error;
  }
}

// Fun√ß√£o para buscar produto por ID
async function getProductById(id) {
  if (!authToken) {
    console.log('‚ö†Ô∏è  Nenhum token dispon√≠vel');
    return null;
  }

  try {
    console.log(`üîç Buscando produto ID: ${id}...`);
    const response = await apiClient.get(`/products/${id}`, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    
    console.log('‚úÖ Produto encontrado!');
    console.log(`üì¶ Nome: ${response.data.data.title}`);
    console.log(`üí∞ Pre√ßo: $${response.data.data.price} (R$ ${response.data.data.priceInBRL})`);
    console.log(`üè∑Ô∏è  Categoria: ${response.data.data.category}`);
    console.log(`üíæ Cache: ${response.data.cached ? 'Sim' : 'N√£o'}`);
    
    return response.data.data;
  } catch (error) {
    console.error('‚ùå Erro ao buscar produto:', error.response?.data || error.message);
    throw error;
  }
}

// Fun√ß√£o para listar categorias
async function getCategories() {
  if (!authToken) {
    console.log('‚ö†Ô∏è  Nenhum token dispon√≠vel');
    return null;
  }

  try {
    console.log('üìÇ Buscando categorias...');
    const response = await apiClient.get('/categories', {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    
    console.log(`‚úÖ ${response.data.total} categorias encontradas!`);
    console.log(`üíæ Cache: ${response.data.cached ? 'Sim' : 'N√£o'}`);
    
    return response.data.data;
  } catch (error) {
    console.error('‚ùå Erro ao buscar categorias:', error.response?.data || error.message);
    throw error;
  }
}

// Fun√ß√£o para buscar produtos por categoria
async function getProductsByCategory(category, limit = 10) {
  if (!authToken) {
    console.log('‚ö†Ô∏è  Nenhum token dispon√≠vel');
    return null;
  }

  try {
    console.log(`üõçÔ∏è  Buscando produtos da categoria: ${category}...`);
    const response = await apiClient.get(`/products/category/${category}?limit=${limit}`, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    
    console.log(`‚úÖ ${response.data.total} produtos encontrados na categoria ${category}!`);
    console.log(`üíæ Cache: ${response.data.cached ? 'Sim' : 'N√£o'}`);
    
    return response.data.data;
  } catch (error) {
    console.error('‚ùå Erro ao buscar produtos da categoria:', error.response?.data || error.message);
    throw error;
  }
}

// Fun√ß√£o para limpar cache (apenas admin)
async function clearCache() {
  if (!authToken) {
    console.log('‚ö†Ô∏è  Nenhum token dispon√≠vel');
    return null;
  }

  try {
    console.log('üßπ Limpando cache...');
    const response = await apiClient.delete('/admin/cache', {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    
    console.log('‚úÖ Cache limpo com sucesso!');
    console.log(`üóëÔ∏è  Entradas removidas: ${response.data.clearedEntries}`);
    
    return response.data;
  } catch (error) {
    console.error('‚ùå Erro ao limpar cache:', error.response?.data || error.message);
    throw error;
  }
}

// Fun√ß√£o para obter estat√≠sticas do cache (apenas admin)
async function getCacheStats() {
  if (!authToken) {
    console.log('‚ö†Ô∏è  Nenhum token dispon√≠vel');
    return null;
  }

  try {
    console.log('üìä Obtendo estat√≠sticas do cache...');
    const response = await apiClient.get('/admin/cache/stats', {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    
    console.log('‚úÖ Estat√≠sticas obtidas!');
    console.log(`üì¶ Tamanho do cache: ${response.data.cacheSize} entradas`);
    
    return response.data;
  } catch (error) {
    console.error('‚ùå Erro ao obter estat√≠sticas:', error.response?.data || error.message);
    throw error;
  }
}

// Fun√ß√£o para verificar status dos servi√ßos
async function checkHealth() {
  try {
    console.log('üè• Verificando sa√∫de dos servi√ßos...');
    const response = await apiClient.get('/health');
    
    console.log('‚úÖ Status dos servi√ßos:');
    console.log(`üåê Gateway: ${response.data.gateway}`);
    console.log(`üîê Auth Service: ${response.data.services.auth?.status || 'ERROR'}`);
    console.log(`üõçÔ∏è  Products Service: ${response.data.services.products?.status || 'ERROR'}`);
    
    return response.data;
  } catch (error) {
    console.error('‚ùå Erro ao verificar sa√∫de:', error.response?.data || error.message);
    throw error;
  }
}

// Fun√ß√£o para obter documenta√ß√£o da API
async function getApiDocs() {
  try {
    console.log('üìö Obtendo documenta√ß√£o da API...');
    const response = await apiClient.get('/api-docs');
    
    console.log('‚úÖ Documenta√ß√£o obtida!');
    console.log(`üìã Vers√£o: ${response.data.version}`);
    console.log(`üìù Endpoints dispon√≠veis: ${Object.keys(response.data.endpoints).length} categorias`);
    
    return response.data;
  } catch (error) {
    console.error('‚ùå Erro ao obter documenta√ß√£o:', error.response?.data || error.message);
    throw error;
  }
}

// Exemplo de uso completo
async function runExample() {
  console.log('üöÄ Iniciando exemplo de uso da API...\n');

  try {
    // 1. Verificar sa√∫de dos servi√ßos
    await checkHealth();
    console.log('');

    // 2. Obter documenta√ß√£o
    await getApiDocs();
    console.log('');

    // 3. Fazer login com usu√°rio comum
    await login('user@exemplo.com', 'password');
    console.log('');

    // 4. Verificar token
    await verifyToken();
    console.log('');

    // 5. Obter perfil
    await getProfile();
    console.log('');

    // 6. Listar categorias
    const categories = await getCategories();
    console.log('üìÇ Categorias dispon√≠veis:');
    categories.forEach(cat => console.log(`   - ${cat.name} (${cat.productCount} produtos)`));
    console.log('');

    // 7. Listar produtos
    const products = await getProducts(5, 'desc');
    console.log('üõçÔ∏è  Primeiros 5 produtos:');
    products.forEach(product => {
      console.log(`   - ${product.title} ($${product.price})`);
    });
    console.log('');

    // 8. Buscar produto espec√≠fico
    await getProductById(1);
    console.log('');

    // 9. Buscar produtos por categoria
    await getProductsByCategory('electronics', 3);
    console.log('');

    // 10. Fazer login como admin
    await login('admin@exemplo.com', 'password');
    console.log('');

    // 11. Obter estat√≠sticas do cache
    await getCacheStats();
    console.log('');

    // 12. Limpar cache
    await clearCache();
    console.log('');

    console.log('‚úÖ Exemplo conclu√≠do com sucesso!');

  } catch (error) {
    console.error('‚ùå Erro no exemplo:', error.message);
  }
}

// Exportar fun√ß√µes para uso em outros arquivos
module.exports = {
  login,
  registerUser,
  verifyToken,
  getProfile,
  getProducts,
  getProductById,
  getCategories,
  getProductsByCategory,
  clearCache,
  getCacheStats,
  checkHealth,
  getApiDocs,
  runExample
};

// Executar exemplo se o arquivo for executado diretamente
if (require.main === module) {
  runExample();
} 